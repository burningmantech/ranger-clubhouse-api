#!/bin/sh
#
# Run unit tests.
#

. "$(dirname "$0")/.common.sh";

db_database="rangers-testing";
    db_user="rangers";
db_password="$(uuidgen)";

db_container_name="";


##
# DB Container
##

start_db_container() {
    trap cleanup_db_container EXIT;

    db_container_name="ranger-clubhouse-db-test_${$}";

    echo "Starting database container: ${db_container_name}...";

    docker run                                  \
        --rm --detach                           \
        --name="${db_container_name}"           \
        --env="MYSQL_RANDOM_ROOT_PASSWORD=yes"  \
        --env="MYSQL_DATABASE=${db_database}"   \
        --env="MYSQL_USER=${db_user}"           \
        --env="MYSQL_PASSWORD=${db_password}"   \
        --env="MYSQL_ROOT_HOST=%"               \
        "${db_image_name}"                      \
        > /dev/null;
}


wait_for_db() {
    started() {
        docker logs "${db_container_name}" 2>&1 \
            | grep -e 'mysqld (mysqld .*) starting as process 1 ' \
            ;
    }

    while true; do
        printf "Waiting on database to start... ";

        if [ -n "$(started)" ]; then
            echo "Database started.";
            break;
        fi;
        sleep 1;
        echo "";
    done;
}


db_sql() {
    docker exec "${db_container_name}"                       \
        mysql                                                \
            --user="${db_user}" --password="${db_password}"  \
            --database="${db_database}"                      \
            "$@"                                             \
            ;
}


db_init() {
    if [ -n "${RANGER_TEST_DB_DUMP:-}" ]; then
        echo "Importing test database dump...";
        gunzip < "${RANGER_TEST_DB_DUMP}" | db_sql;
    fi;

    echo "Applying database schema...";
    docker run                                            \
        --rm                                              \
        --env="RANGER_DB_HOST_NAME=${db_container_name}"  \
        --env="RANGER_DB_DATABASE_NAME=${db_database}"    \
        --env="RANGER_DB_USER_NAME=${db_user}"            \
        --env="RANGER_DB_PASSWORD=${db_password}"         \
        --link="${db_container_name}"                     \
        "${api_image_name}"                               \
        php artisan migrate:fresh --force --env=testing;
}


cleanup_db_container() {
    if [ -n "${db_container_name}" ]; then
        echo "Terminating database container: ${db_container_name}...";

        docker kill "${db_container_name}" > /dev/null;

        db_container_name="";
    fi;
}


##
# Tests
##

test_unit() {
    echo "Running unit tests...";

    docker run                                            \
        --rm                                              \
        --env="RANGER_DB_HOST_NAME=${db_container_name}"  \
        --env="RANGER_DB_DATABASE_NAME=${db_database}"    \
        --env="RANGER_DB_USER_NAME=${db_user}"            \
        --env="RANGER_DB_PASSWORD=${db_password}"         \
        --link="${db_container_name}"                     \
        "${api_image_name}"                               \
        sh -c "/usr/bin/composer require --dev phpunit/phpunit && ./vendor/bin/phpunit \"$@\"";
}


start_db_container || exit 10;
wait_for_db        || exit 11;
db_init            || exit 12;
test_unit          || exit 100;

echo "Tests passed.";

cleanup_db_container;
