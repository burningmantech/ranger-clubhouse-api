#!/bin/sh
#
# Start the app in a Docker container and test it
#

. "$(dirname "$0")/.common.sh";

db_database="rangers";
    db_user="rangers";
db_password="$(uuidgen)";

host_app_port="$("${wd}/bin/find_port")";

 db_container_name="";
app_container_name="";

 db_image_name="mysql/mysql-server:5.6";
app_image_name="${image_name}";


##
# HTTP
##

http_status() {
    head -1 | cut -d " " -f 2;
}


http_header() {
    name="$1"; shift;

    # FIXME: We're matching the ending carriage return with '.' here because
    # '\r ' doesn't seem to work.
    sed -n -e 's|^'"${name}"': \(.*\).$|\1|p';
}


http_body() {
    sed -n -e '/^.$/,$p' | tail -n +2;
}


http_get() {
    local path="$1"; shift;

    local e;

    curl                                            \
        --include --fail --silent --show-error      \
        "http://localhost:${host_app_port}${path}"  \
        && e=0 || e=$?;

    return ${e};
}


http_get_error() {
    local path="$1"; shift;

    local e;

    curl                                            \
        --include --silent --show-error             \
        "http://localhost:${host_app_port}${path}"  \
        && e=0 || e=$?;

    return ${e};
}


##
# DB Container
##

start_db_container() {
    trap cleanup_app_container EXIT;

    db_container_name="ranger-clubhouse-db-test_${$}";

    echo "Starting database container: ${db_container_name}...";

    docker run                                  \
        --rm --detach                           \
        --name="${db_container_name}"           \
        --env="MYSQL_RANDOM_ROOT_PASSWORD=yes"  \
        --env="MYSQL_DATABASE=${db_database}"   \
        --env="MYSQL_USER=${db_user}"           \
        --env="MYSQL_PASSWORD=${db_password}"   \
        --env="MYSQL_ROOT_HOST=%"               \
        "${db_image_name}"                      \
        > /dev/null;
}


wait_for_db() {
    started() {
        docker logs "${db_container_name}" 2>&1 \
            | grep -e 'mysqld (mysqld .*) starting as process 1 ' \
            ;
    }

    while true; do
        echo "Waiting on database to start...";

        if [ -n "$(started)" ]; then
            echo "Database started.";
            break;
        fi;
        sleep 1;
    done;
}


db_init() {
    echo "Applying database schema...";
    docker run                                            \
        --rm                                              \
        --env="RANGER_DB_HOST_NAME=${db_container_name}"  \
        --env="RANGER_DB_DATABASE_NAME=${db_database}"    \
        --env="RANGER_DB_USER_NAME=${db_user}"            \
        --env="RANGER_DB_PASSWORD=${db_password}"         \
        --link="${db_container_name}"                     \
        "${app_image_name}"                               \
        php artisan migrate:fresh --seed --force;
}


cleanup_db_container() {
    if [ -n "${db_container_name}" ]; then
        echo "Terminating database container: ${db_container_name}...";

        docker kill "${db_container_name}" > /dev/null;
    fi;
}


##
# App Container
##

start_app_container() {
    app_container_name="ranger-clubhouse-api-test_${$}";

    trap cleanup_app_container EXIT;

    echo "Starting application container: ${app_container_name}...";

    docker run                                            \
        --rm --detach                                     \
        --name="${app_container_name}"                    \
        --env="RANGER_DB_HOST_NAME=${db_container_name}"  \
        --env="RANGER_DB_DATABASE_NAME=${db_database}"    \
        --env="RANGER_DB_USER_NAME=${db_user}"            \
        --env="RANGER_DB_PASSWORD=${db_password}"         \
        --link="${db_container_name}"                     \
        --publish="${host_app_port}:80"                   \
        "${app_image_name}"                               \
        > /dev/null;
}


wait_for_app() {
    local response="$(mktemp)";
    local    error="$(mktemp)";

    local count=0;
    local e;

    check_timeout() {
        local timeout=60;

        if [ ${count} -gt ${timeout} ]; then
            echo "ERROR: Timed out";
            echo "Logs:";
            docker logs "${app_container_name}";
            return 1;
        fi;
    }

    while true; do
        echo "Waiting on application to start...";

        http_get / > "${response}" 2> "${error}" && e=0 || e=$?;

        count=$((${count} + 1));

        check_timeout || return 1;

        if [ ${e} -eq 7 ]; then
            printf "Connection refused from server. ";
            sleep 1;
            continue;
        fi;

        if [ ${e} -eq 52 ]; then
            printf "Empty reply from server. ";
            sleep 1;
            continue;
        fi;

        if [ ${e} -eq 56 ]; then
            printf "Connection to server reset. ";
            sleep 1;
            continue;
        fi;

        if [ ${e} -ne 0 ]; then
            fail "Error HTTP status from server.";
            echo "Error from curl:"; cat "${error}";
            echo "Response:"; cat "${response}";
            return 1;
        fi;

        echo "Application is responding.";
        break;
    done;

    rm "${response}" "${error}";
}


cleanup_app_container() {
    if [ -n "${app_container_name}" ]; then
        echo "Terminating application container: ${app_container_name}...";

        docker kill "${app_container_name}" > /dev/null;
    fi;

    cleanup_db_container;
}


##
# Tests
##

fail() {
    echo "FAIL:" "$@";
}


diff_body() {
    local expected="$1"; shift;
    local received="$1"; shift;

    if ! diff --brief "${expected}" "${received}" > /dev/null; then
        fail "Received body does not match expected output.";
        diff -ud "${expected}" "${received}";
        return 1;
    fi;
}


test_root_resource() {
    echo "Testing root resource...";

    local response="$(mktemp)";
    local    error="$(mktemp)";

    local e;

    http_get / > "${response}" 2> "${error}" && e=0 || e=$?;

    if [ ${e} -eq 22 ]; then
        fail "Root resource not found.  Expected redirect.";
        return 1;
    fi;

    if [ ${e} -ne 0 ]; then
        fail "Error HTTP status from server.";
        echo "Error from curl:"; cat "${error}";
        echo "Response:"; cat "${response}";
        return 1;
    fi;

    local status="$(http_status < "${response}")";

    if [ ${status} -ne 200 ]; then
        fail "Expected HTTP status 200 (OK) for root resource.";
        echo "Response:"; cat "${response}";
        return 1;
    fi;

    local body="$(http_body < "${response}")";

    if [ "${body}" != "Ranger Clubhouse API Server" ]; then
        fail "Unexpected body for root resource.";
        echo "Response:"; cat "${response}";
        return 1;
    fi;

    rm "${response}" "${error}";
}


test_config() {
    echo "Testing config resource...";

    local response="$(mktemp)";
    local     body="$(mktemp)";
    local    error="$(mktemp)";

    if ! http_get /api/config > "${response}" 2> "${error}"; then
        fail "Error HTTP status from server.";
        echo "Error from curl:"; cat "${error}";
        echo "Response:"; cat "${response}";
        return 1;
    fi;

    local content_type="$(http_header Content-Type < "${response}")";

    if [ "${content_type}" != "application/json" ]; then
        fail "Expected application/json content type.";
        echo "Content-Type: ${content_type}";
        echo "Response:"; cat "${response}";
        return 1;
    fi;

    http_body < "${response}" > "${body}";

    # Received JSON payload should have a "VCSRevision" key.
    if ! grep '"VCSRevision":' "${body}" > /dev/null; then
        fail "Configuration payload lacks VCSRevision.";
        echo "Content-Type: ${content_type}";
        echo "Response:"; cat "${response}";
        return 1;
    fi;

    rm "${response}" "${body}" "${error}";
}


echo "Testing service...";

start_db_container  || exit 10;
wait_for_db         || exit 11;
db_init             || exit 12;
start_app_container || exit 20;
wait_for_app        || exit 21;
test_root_resource  || exit 100;
test_config         || exit 101;

echo "Tests passed."
